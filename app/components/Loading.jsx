import React, { useEffect, useRef, useState } from "react";
import { animate, AnimatePresence, motion } from "framer-motion";

function Loading() {
  const [percent, setPercent] = useState(0);

  const numbers = useRef([]);

  const words = useRef(["LOADING"]);

  function getRandomInt(min, max) {
    return Math.ceil(Math.random() * (max - min + 1)) + min - 1;
  }

  const randomInt = useRef(getRandomInt(33, 47));
  const randomInt2 = useRef(getRandomInt(77, 88));

  useEffect(() => {
    // console.log(window.matchMedia("(prefers-color-scheme: dark)"));
    if (percent === 95) words.current.splice(0, 1, "WELCOME");
    setTimeout(
      () => {
        if (percent < 100) {
          numbers.current.splice(0, 1, percent);
          setPercent(percent + 1);
        }
      },
      percent === randomInt.current || percent === randomInt2.current ? 540 : 40
    );
    animate(loadingBar.current, {
      x: `${percent}%`,
    });
  }, [percent]);

  const loadingBar = useRef();

  return (
    <div className="loading-container">
      <div className="loading-bar-bg">
        <motion.div
          className="loading-bar"
          transition={{
            ease: [0.33, 1, 0.68, 1],
          }}
          ref={loadingBar}
        ></motion.div>
      </div>
      <div className="fourcorners">
        <AnimatePresence>
          <LostInSpace randomInt2={randomInt2} />
          <CoverDiv randomInt2={randomInt2} />
          <FourCorners randomInt={randomInt} randomInt2={randomInt2} />
        </AnimatePresence>
      </div>
      <AnimatePresence mode="wait">
        {words.current.map((w) => (
          <motion.p
            key={w}
            initial={{ opacity: 0, y: 18 }}
            animate={{
              opacity: 1,
              y: 0,
            }}
            exit={{ opacity: 0, y: -18 }}
            transition={{ ease: "linear" }}
            className="loading-welcome"
          >
            {w}
          </motion.p>
        ))}
      </AnimatePresence>
      <p className="percent">
        <span>(</span>
        <AnimatePresence mode="popLayout">
          {numbers.current.map((n) => (
            <motion.span
              key={percent}
              initial={{ opacity: 0, y: 18 }}
              animate={{
                opacity: 1,
                y: 0,
              }}
              exit={{ opacity: 0, y: -18 }}
              transition={{ ease: "linear" }}
            >{`${percent < 10 ? 0 : ""}${percent}`}</motion.span>
          ))}
        </AnimatePresence>
        <span>)</span>
      </p>
    </div>
  );
}

function FourCorners({ randomInt, randomInt2 }) {
  const firstDuration = randomInt.current * 0.04 + 0.54;
  const secondDuration = 5.12 - firstDuration + 0.54;

  const variableTime = (5.12 - (100 - randomInt2.current) * 0.04) / 5.12;

  return (
    <motion.svg
      width="100"
      height="100"
      viewBox="0 0 100 100"
      style={{ background: "black", zIndex: 2 }}
      xmlns="http://www.w3.org/2000/svg"
      // className="fourcorners"
      initial={{ opacity: 0, scale: 0.4, x: "-50%" }}
      animate={{
        opacity: 1,
        scale: 1,
        x: ["-112.5%", "-225%", "-225%", "0"],
      }}
      // exit={{opacity:0}}
      transition={{
        opacity: { duration: firstDuration },
        scale: { duration: firstDuration },
        x: {
          delay: firstDuration,
          duration: secondDuration,
          times: [0, 0.4, variableTime, 1],
        },
      }}
    >
      {/* top left */}
      <motion.rect
        x="0"
        y="0"
        width="10"
        height="25"
        fill="white"
        initial={{ x: 15, y: 15 }}
        animate={{ x: 0, y: 0 }}
        //exit={{}}
        transition={{
          x: { duration: firstDuration },
          y: { duration: firstDuration },
        }}
      />
      <motion.rect
        x="0"
        y="0"
        width="25"
        height="10"
        fill="white"
        initial={{ x: 15, y: 15 }}
        animate={{ x: 1, y: 0 }}
        //exit={{}}
        transition={{
          x: { duration: firstDuration },
          y: { duration: firstDuration },
        }}
      />
      {/* top right */}
      <motion.rect
        x="75"
        y="0"
        width="25"
        height="10"
        fill="white"
        initial={{ x: -15, y: 15 }}
        animate={{ x: 1, y: 0 }}
        //exit={{}}
        transition={{
          x: { duration: firstDuration },
          y: { duration: firstDuration },
        }}
      />
      <motion.rect
        x="90"
        y="0"
        width="10"
        height="25"
        fill="white"
        initial={{ x: -15, y: 15 }}
        animate={{ x: 0, y: 0 }}
        //exit={{}}
        transition={{
          x: { duration: firstDuration },
          y: { duration: firstDuration },
        }}
      />
      {/* bottom right */}
      <motion.rect
        x="75"
        y="90"
        width="25"
        height="10"
        fill="white"
        initial={{ x: -15, y: -15 }}
        animate={{ x: -1, y: 0 }}
        //exit={{}}
        transition={{
          x: { duration: firstDuration },
          y: { duration: firstDuration },
        }}
      />
      <motion.rect
        x="90"
        y="75"
        width="10"
        height="25"
        fill="white"
        initial={{ x: -15, y: -15 }}
        animate={{ x: 0, y: 0 }}
        //exit={{}}
        transition={{
          x: { duration: firstDuration },
          y: { duration: firstDuration },
        }}
      />
      {/* bottom left */}
      <motion.rect
        x="0"
        y="75"
        width="10"
        height="25"
        fill="white"
        initial={{ x: 15, y: -15 }}
        animate={{ x: 0, y: 0 }}
        //exit={{}}
        transition={{
          x: { duration: firstDuration },
          y: { duration: firstDuration },
        }}
      />
      <motion.rect
        x="0"
        y="90"
        width="25"
        height="10"
        fill="white"
        initial={{ x: 15, y: -15 }}
        animate={{ x: 1, y: 0 }}
        //exit={{}}
        transition={{
          x: { duration: firstDuration },
          y: { duration: firstDuration },
        }}
      />
    </motion.svg>
  );
}

function LostInSpace({ randomInt2 }) {
  const delay = 5.12 - (100 - randomInt2.current) * 0.04;
  return (
    <motion.svg
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
      width="209"
      height="100"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ delay }}
    >
      <path
        d="M0 0 C1.12792969 -0.01095703 2.25585938 -0.02191406 3.41796875 -0.03320312 C8.14169253 0.00872342 11.52793763 0.03944346 15.73046875 2.30078125 C17.70406265 4.8233218 18.17264828 6.14252779 18.3125 9.3125 C18.36019531 10.11171875 18.40789062 10.9109375 18.45703125 11.734375 C18.47121094 12.33765625 18.48539063 12.9409375 18.5 13.5625 C16.19 13.5625 13.88 13.5625 11.5 13.5625 C10.84 11.2525 10.18 8.9425 9.5 6.5625 C2.9 6.5625 -3.7 6.5625 -10.5 6.5625 C-10.5 9.8625 -10.5 13.1625 -10.5 16.5625 C-8.90486945 18.15763055 -7.19240299 17.72741933 -4.984375 17.7734375 C-4.06269531 17.80179688 -3.14101563 17.83015625 -2.19140625 17.859375 C-0.24627605 17.91103848 1.69906226 17.955431 3.64453125 17.9921875 C12.77210398 18.29686308 12.77210398 18.29686308 16.5 21.5625 C19.59475841 25.98491912 19.0048365 31.39939941 18.5 36.5625 C17.1875 39.6875 17.1875 39.6875 15.5 41.5625 C10.5113735 43.2253755 5.34896004 42.87278878 0.125 42.9375 C-1.58042969 42.99357422 -1.58042969 42.99357422 -3.3203125 43.05078125 C-11.66384547 43.13891716 -11.66384547 43.13891716 -15.76953125 40.30859375 C-18.30491919 36.28516775 -17.89388705 34.21036722 -17.5 29.5625 C-15.52 29.5625 -13.54 29.5625 -11.5 29.5625 C-10.84 31.8725 -10.18 34.1825 -9.5 36.5625 C-2.9 36.5625 3.7 36.5625 10.5 36.5625 C10.5 32.9325 10.5 29.3025 10.5 25.5625 C9.12585938 25.52511719 7.75171875 25.48773438 6.3359375 25.44921875 C4.51559873 25.38353642 2.69528743 25.31708987 0.875 25.25 C-0.02863281 25.22744141 -0.93226562 25.20488281 -1.86328125 25.18164062 C-7.08760766 24.97190489 -11.01924633 24.53789006 -15.5 21.5625 C-17.83774031 18.05588953 -17.8565834 16.34756512 -17.9375 12.1875 C-17.97746094 11.06601563 -18.01742187 9.94453125 -18.05859375 8.7890625 C-17.5 5.5625 -17.5 5.5625 -15.75390625 2.68359375 C-10.70924043 -0.60482586 -5.88839543 -0.1244975 0 0 Z "
        fill="#FDFDFD"
        transform="translate(50.5,57.4375)"
      />
      <path
        d="M0 0 C0.99386719 -0.03287109 1.98773438 -0.06574219 3.01171875 -0.09960938 C7.7951864 -0.13482902 10.31938297 -0.1352511 14.30078125 2.6953125 C16.96776468 6.70435397 16.52288375 8.74247179 16.125 13.4375 C14.145 13.4375 12.165 13.4375 10.125 13.4375 C9.465 11.1275 8.805 8.8175 8.125 6.4375 C5.47909986 6.41065321 2.83346904 6.39073643 0.1875 6.375 C-0.56724609 6.36662109 -1.32199219 6.35824219 -2.09960938 6.34960938 C-4.02494313 6.34097559 -5.95035581 6.38525667 -7.875 6.4375 C-9.16112676 7.49728933 -9.16112676 7.49728933 -8.97265625 9.94140625 C-8.96105469 10.95074219 -8.94945313 11.96007812 -8.9375 13 C-8.92847656 14.01191406 -8.91945313 15.02382812 -8.91015625 16.06640625 C-8.89855469 16.84886719 -8.88695313 17.63132812 -8.875 18.4375 C-7.13863281 18.38529297 -7.13863281 18.38529297 -5.3671875 18.33203125 C-3.8281396 18.30387793 -2.28907589 18.27657944 -0.75 18.25 C0.01054688 18.22486328 0.77109375 18.19972656 1.5546875 18.17382812 C6.51944307 18.1096287 9.80306571 18.72479656 14.125 21.4375 C16.95683525 24.26933525 16.49282849 27.02594435 16.5 30.8125 C16.52449219 31.48539063 16.54898438 32.15828125 16.57421875 32.8515625 C16.59437709 36.26504088 16.37828396 38.10445853 14.2890625 40.8515625 C9.89368829 44.07272121 5.46104324 43.65436141 0.25 43.6875 C-0.55308594 43.708125 -1.35617188 43.72875 -2.18359375 43.75 C-6.92391449 43.7812377 -10.02334432 43.50851418 -13.875 40.4375 C-16.78047505 36.73051459 -17.19994469 34.09504061 -16.875 29.4375 C-14.565 29.4375 -12.255 29.4375 -9.875 29.4375 C-9.215 31.7475 -8.555 34.0575 -7.875 36.4375 C-5.22909986 36.46434679 -2.58346904 36.48426357 0.0625 36.5 C1.19461914 36.51256836 1.19461914 36.51256836 2.34960938 36.52539062 C4.27494313 36.53402441 6.20035581 36.48974333 8.125 36.4375 C9.3495178 35.43280377 9.3495178 35.43280377 9.2578125 33.40625 C9.25394531 32.18421875 9.25394531 32.18421875 9.25 30.9375 C9.25257812 30.1228125 9.25515625 29.308125 9.2578125 28.46875 C9.3495178 26.44219623 9.3495178 26.44219623 8.125 25.4375 C4.38732259 25.23321399 0.65617509 25.09097056 -3.0859375 25.0078125 C-7.76382342 24.82496354 -11.13984593 24.5596326 -14.875 21.4375 C-17.78607043 17.20721336 -17.40283444 12.37195226 -16.875 7.4375 C-13.37237796 -0.56849322 -7.71722368 0.04469435 0 0 Z "
        fill="#FDFDFD"
        transform="translate(85.875,-0.4375)"
      />
      <path
        d="M0 0 C6 0 6 0 7.765625 1.66015625 C8.25546875 2.45292969 8.7453125 3.24570313 9.25 4.0625 C9.82621094 4.96226562 10.40242187 5.86203125 10.99609375 6.7890625 C11.65738281 7.84867187 12.31867188 8.90828125 13 10 C14.3094031 11.98066969 15.63317126 13.95125747 16.95800781 15.92163086 C18.98536799 18.9389187 20.99122544 21.97031259 23 25 C23.66 25.99 24.32 26.98 25 28 C25.33 18.76 25.66 9.52 26 0 C27.98 0 29.96 0 32 0 C32 14.19 32 28.38 32 43 C27 43 27 43 25.33203125 41.33984375 C24.83058594 40.54707031 24.32914063 39.75429688 23.8125 38.9375 C23.22597656 38.03515625 22.63945312 37.1328125 22.03515625 36.203125 C21.36355469 35.14609375 20.69195312 34.0890625 20 33 C19.14821991 31.72149314 18.29254788 30.44557313 17.43359375 29.171875 C15.69451236 26.59119059 13.95750756 24.00933844 12.234375 21.41796875 C11.87569336 20.87938232 11.51701172 20.3407959 11.14746094 19.78588867 C9.71445752 17.55558655 8.36392295 15.27320491 7 13 C6.67 22.9 6.34 32.8 6 43 C4.02 43 2.04 43 0 43 C0 28.81 0 14.62 0 0 Z "
        fill="#FCFCFC"
        transform="translate(177,0)"
      />
      <path
        d="M0 0 C2.97 0 5.94 0 9 0 C9.30703857 0.75506836 9.61407715 1.51013672 9.93041992 2.28808594 C11.09489075 5.15104407 12.25982448 8.01381332 13.42504883 10.87646484 C14.16717443 12.70005495 14.90878972 14.5238527 15.65039062 16.34765625 C16.13056641 17.52714844 16.61074219 18.70664063 17.10546875 19.921875 C17.58419434 21.09943359 18.06291992 22.27699219 18.55615234 23.49023438 C20.35996849 27.87502656 22.22623176 32.23226263 24.1105957 36.58300781 C25 39 25 39 25 42 C22.69 42 20.38 42 18 42 C15 35.375 15 35.375 15 32 C8.07 32 1.14 32 -6 32 C-6.99 34.97 -7.98 37.94 -9 41 C-10 42 -10 42 -13.5625 42.0625 C-14.696875 42.041875 -15.83125 42.02125 -17 42 C-13.79706021 32.77254138 -10.05384433 23.80274376 -6.25 14.8125 C-5.64168151 13.36924411 -5.03360693 11.92588538 -4.42578125 10.48242188 C-2.95332442 6.98709178 -1.4775936 3.49316153 0 0 Z M4 8 C0.94253032 13.89741187 -1.79433329 19.73126302 -4 26 C1.28 26 6.56 26 12 26 C10.02989474 19.79416842 7.74844552 13.90148454 5 8 C4.67 8 4.34 8 4 8 Z "
        fill="#FDFDFD"
        transform="translate(115,58)"
      />
      <path
        d="M0 0 C10.56 0 21.12 0 32 0 C32 1.65 32 3.3 32 5 C23.42 5 14.84 5 6 5 C6 9.29 6 13.58 6 18 C13.59 18 21.18 18 29 18 C29 19.65 29 21.3 29 23 C21.41 23 13.82 23 6 23 C6 27.62 6 32.24 6 37 C14.58 37 23.16 37 32 37 C32 38.65 32 40.3 32 42 C21.44 42 10.88 42 0 42 C0 28.14 0 14.28 0 0 Z "
        fill="#FCFCFC"
        transform="translate(177,58)"
      />
      <path
        d="M0 0 C1.49853516 -0.00290039 1.49853516 -0.00290039 3.02734375 -0.00585938 C4.05988281 0.01798828 5.09242188 0.04183594 6.15625 0.06640625 C7.18878906 0.05544922 8.22132813 0.04449219 9.28515625 0.03320312 C13.89014935 0.07776757 16.81683908 0.12089642 20.8125 2.5390625 C24.33136423 6.52760564 23.73930315 9.47961081 23.65625 14.62890625 C21.34625 14.62890625 19.03625 14.62890625 16.65625 14.62890625 C16.511875 13.49453125 16.3675 12.36015625 16.21875 11.19140625 C16.04453522 7.82113424 16.04453522 7.82113424 14.65625 6.62890625 C13.31357587 6.54258751 11.96650678 6.52184152 10.62109375 6.53125 C9.81220703 6.53447266 9.00332031 6.53769531 8.16992188 6.54101562 C6.8947168 6.55358398 6.8947168 6.55358398 5.59375 6.56640625 C4.73974609 6.57091797 3.88574219 6.57542969 3.00585938 6.58007812 C0.88929337 6.59190252 -1.22723685 6.60983856 -3.34375 6.62890625 C-3.36840746 10.74063185 -3.38658959 14.85232903 -3.39868164 18.96411133 C-3.4037208 20.36385853 -3.41055216 21.76360045 -3.41918945 23.16333008 C-3.4312732 25.17136402 -3.43644807 27.17943582 -3.44140625 29.1875 C-3.44664307 30.39720459 -3.45187988 31.60690918 -3.45727539 32.85327148 C-3.66150285 35.53702642 -3.66150285 35.53702642 -2.34375 36.62890625 C-1.00359779 36.78472928 0.34383903 36.87934767 1.69140625 36.9453125 C2.90473633 37.0081543 2.90473633 37.0081543 4.14257812 37.07226562 C5.4177832 37.13124023 5.4177832 37.13124023 6.71875 37.19140625 C7.99975586 37.25618164 7.99975586 37.25618164 9.30664062 37.32226562 C11.42297037 37.42867327 13.53958813 37.52932356 15.65625 37.62890625 C15.98625 34.98890625 16.31625 32.34890625 16.65625 29.62890625 C18.96625 29.62890625 21.27625 29.62890625 23.65625 29.62890625 C23.95972349 37.51921704 23.95972349 37.51921704 21.65625 40.62890625 C16.85687939 43.59662977 11.69132607 43.03590892 6.21875 43.06640625 C5.18169922 43.09927734 4.14464844 43.13214844 3.07617188 43.16601562 C2.07263672 43.17310547 1.06910156 43.18019531 0.03515625 43.1875 C-0.8767749 43.20095459 -1.78870605 43.21440918 -2.72827148 43.22827148 C-6.55472821 42.35139747 -8.00024286 40.73412456 -10.34375 37.62890625 C-10.99072266 34.203125 -10.99072266 34.203125 -11.0078125 30.31640625 C-11.01259613 29.62506592 -11.01737976 28.93372559 -11.02230835 28.22143555 C-11.02569736 26.76576449 -11.0165645 25.31001629 -10.99560547 23.85449219 C-10.96881546 21.63433128 -10.99537647 19.41922364 -11.02734375 17.19921875 C-11.02403946 15.77993683 -11.01763281 14.36065804 -11.0078125 12.94140625 C-11.00217285 11.65878906 -10.9965332 10.37617187 -10.99072266 9.0546875 C-9.81842466 2.84725903 -6.22206351 -0.00498208 0 0 Z "
        fill="#FDFDFD"
        transform="translate(151.34375,57.37109375)"
      />
      <path
        d="M0 0 C6.55875 -0.0928125 6.55875 -0.0928125 13.25 -0.1875 C15.30976074 -0.22846802 15.30976074 -0.22846802 17.41113281 -0.27026367 C18.49749023 -0.27775635 19.58384766 -0.28524902 20.703125 -0.29296875 C22.36843262 -0.31653442 22.36843262 -0.31653442 24.06738281 -0.34057617 C27.35000916 0.04064792 28.68197998 0.68164089 31 3 C32.14544249 6.43632747 32.2397802 9.25431955 32.3125 12.875 C32.36857422 14.69644531 32.36857422 14.69644531 32.42578125 16.5546875 C31.92772309 20.58484619 30.83027718 22.15396989 28 25 C25.59940183 26.20029908 24.10639351 26.11459743 21.4296875 26.09765625 C20.53378906 26.09443359 19.63789062 26.09121094 18.71484375 26.08789062 C17.77769531 26.07951172 16.84054688 26.07113281 15.875 26.0625 C14.93011719 26.05798828 13.98523438 26.05347656 13.01171875 26.04882812 C10.6744523 26.03702375 8.33721831 26.01908799 6 26 C6 31.28 6 36.56 6 42 C4.02 42 2.04 42 0 42 C0 28.14 0 14.28 0 0 Z M6 5 C6 10.28 6 15.56 6 21 C8.77141717 21.08089542 11.54047819 21.14044062 14.3125 21.1875 C15.09818359 21.21263672 15.88386719 21.23777344 16.69335938 21.26367188 C17.45068359 21.27333984 18.20800781 21.28300781 18.98828125 21.29296875 C19.68477783 21.3086792 20.38127441 21.32438965 21.09887695 21.34057617 C23.59109344 20.89410873 24.45992114 19.97032124 26 18 C26.47440869 15.59486137 26.47440869 15.59486137 26.375 13 C26.38273437 12.13375 26.39046875 11.2675 26.3984375 10.375 C25.91724161 7.50669511 25.2486736 6.78487871 23 5 C21.07435138 4.59011951 21.07435138 4.59011951 18.98828125 4.70703125 C18.23095703 4.71669922 17.47363281 4.72636719 16.69335938 4.73632812 C15.90767578 4.76146484 15.12199219 4.78660156 14.3125 4.8125 C13.51521484 4.82603516 12.71792969 4.83957031 11.89648438 4.85351562 C9.93070033 4.88882911 7.96526418 4.94263553 6 5 Z "
        fill="#FEFEFE"
        transform="translate(73,58)"
      />
      <path
        d="M0 0 C11.88 0 23.76 0 36 0 C36 1.65 36 3.3 36 5 C31.05 5 26.1 5 21 5 C21 17.54 21 30.08 21 43 C19.02 43 17.04 43 15 43 C15 30.46 15 17.92 15 5 C10.05 5 5.1 5 0 5 C0 3.35 0 1.7 0 0 Z "
        fill="#FCFCFC"
        transform="translate(104,0)"
      />
      <path
        d="M0 0 C1.98 0 3.96 0 6 0 C6 12.21 6 24.42 6 37 C13.59 37 21.18 37 29 37 C29 38.98 29 40.96 29 43 C19.43 43 9.86 43 0 43 C0 28.81 0 14.62 0 0 Z "
        fill="#FEFEFE"
        transform="translate(0,0)"
      />
      <path
        d="M0 0 C1.98 0 3.96 0 6 0 C6 14.19 6 28.38 6 43 C4.02 43 2.04 43 0 43 C0 28.81 0 14.62 0 0 Z "
        fill="#FFFFFF"
        transform="translate(166,0)"
      />
      {/* O */}
      <path
        d="M0 0 C2.30859375 -0.23828125 2.30859375 -0.23828125 5 0 C6.66015625 1.64453125 6.66015625 1.64453125 8.0625 3.8125 C11.07881841 8.3996435 13.3569726 10.62291174 18.8125 11.875 C23.21960082 12.26000695 26.14908938 11.25241942 30 9 C32.77377211 6.30694613 34.8587498 3.2118753 37 0 C39.625 -0.1875 39.625 -0.1875 42 0 C41.31429509 5.82849171 38.40645628 9.94344037 34.0625 13.75 C28.20169004 18.0559012 23.17571516 18.85581924 16 18 C9.40893394 16.13371248 4.71805971 11.64193944 1 6 C0.0625 2.5 0.0625 2.5 0 0 Z "
        fill="#FEFEFE"
        transform="translate(25,25)"
      />
      <path
        d="M0 0 C5.19746837 2.77736115 9.60868372 7.80499572 11.69921875 13.31640625 C11.69921875 14.30640625 11.69921875 15.29640625 11.69921875 16.31640625 C9.71921875 16.31640625 7.73921875 16.31640625 5.69921875 16.31640625 C5.11140625 14.95515625 5.11140625 14.95515625 4.51171875 13.56640625 C2.29123793 9.58485443 -0.23938141 7.34710617 -4.30078125 5.31640625 C-8.82007779 4.90047099 -12.94865158 4.75791791 -17.17578125 6.50390625 C-20.53498058 9.36910568 -22.86354936 12.66055841 -25.30078125 16.31640625 C-27.92578125 16.50390625 -27.92578125 16.50390625 -30.30078125 16.31640625 C-29.6073739 10.42244382 -26.65410415 6.31557427 -22.23828125 2.50390625 C-16.18864725 -2.00114034 -7.14661629 -2.12335798 0 0 Z "
        fill="#FEFEFE"
        transform="translate(55.30078125,0.68359375)"
      />
      <path
        d="M0 0 C14.52 0 29.04 0 44 0 C44 1.65 44 3.3 44 5 C29.48 5 14.96 5 0 5 C0 3.35 0 1.7 0 0 Z "
        fill="#FEFEFE"
        transform="translate(24,19)"
      />
    </motion.svg>
  );
}

function CoverDiv({ randomInt2 }) {
  const delay = 5.12 - (100 - randomInt2.current) * 0.04;
  const duration = (100 - randomInt2.current) * 0.04;
  return (
    <motion.div
      style={{
        height: "100%",
        width: "100%",
        background: "black",
        position: "absolute",
        boxShadow: "-10px 0px 30px black",
      }}
      initial={{ x: 0 }}
      animate={{ x: "100%" }}
      transition={{ x: { delay: delay + 0.88, duration } }}
    />
  );
}

export default Loading;
